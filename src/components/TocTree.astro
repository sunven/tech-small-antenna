---
import type { MarkdownHeadingTree } from '../types'

type Props = { headingsTree: MarkdownHeadingTree[] }
const { headingsTree } = Astro.props
---

<ul class="list-none !m-0">
  {
    headingsTree.map(item => {
      return (
        <li class="nav-link !m-0">
          <a href={`#${item.slug}`} class="">
            {item.text}
          </a>
          {item.children.length > 0 && <Astro.self headingsTree={item.children} />}
        </li>
      )
    })
  }
</ul>
<style>
  .nav-link a {
    color: var(--tw-format-body);
    text-decoration: none;
  }
  .nav-link a.active {
    color: var(--color-primary-500);
    text-decoration: underline;
  }
</style>
<script>
  const aList = document.querySelectorAll('.nav-link a')
  aList.forEach(link => {
    link.addEventListener('click', () => {
      aList.forEach(link => {
        link.classList.remove('active')
      })
      link.classList.add('active')
    })
  })
  const observer = new IntersectionObserver(
    entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // 找到匹配的导航链接并高亮
          aList.forEach(link => {
            link.classList.toggle('active', link.getAttribute('href') === `#${entry.target.id}`)
          })
        }
      })
    },
    {
      threshold: 0.5,
    }
  )

  // 监听所有 section
  document.querySelectorAll('[id]').forEach(section => {
    observer.observe(section)
  })
</script>
